



Internet Engineering Task Force                         A. Boronine, Ed.
Internet-Draft
Intended status: Informational                          November 6, 2014
Expires: May 10, 2015


                        Minimal JSON Type System
                       draft-boronine-teleport-00

Abstract

   Teleport is a minimal type system designed as an extension of JSON.
   It comes with 10 types, sufficient for imposing order on most
   structured data.  It provides a pattern for extending it with
   arbitrary types.  Teleport's type definitions are JSON values, making
   it possible to use them for data specifications.

   Implemented as a library, Teleport can be used for data
   serialization, input validation, as well as an aid in generating
   documentation, particularly useful for web APIs.

   This document provides the mathematical basis of Teleport and can be
   used for implementing libraries based on it.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 10, 2015.

Copyright Notice

   Copyright (c) 2014 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents



Boronine                  Expires May 10, 2015                  [Page 1]

Internet-Draft              Abbreviated Title              November 2014


   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Conventions and Terminology . . . . . . . . . . . . . . .   3
       1.1.1.  Keywords  . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Mathematical Basis  . . . . . . . . . . . . . . . . . . . . .   4
     2.1.  Concrete types  . . . . . . . . . . . . . . . . . . . . .   4
     2.2.  Generic types . . . . . . . . . . . . . . . . . . . . . .   4
   3.  Built-in Concrete Types . . . . . . . . . . . . . . . . . . .   4
   4.  Built-in Generic Types  . . . . . . . . . . . . . . . . . . .   5
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   5
   6.  Security Considerations . . . . . . . . . . . . . . . . . . .   5
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   5
     7.1.  Normative References  . . . . . . . . . . . . . . . . . .   5
     7.2.  Informative References  . . . . . . . . . . . . . . . . .   6
   Appendix A.  Mailing List . . . . . . . . . . . . . . . . . . . .   6
   Appendix B.  Document History . . . . . . . . . . . . . . . . . .   6
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   6

1.  Introduction

   In Teleport, a type is a relation between a type definition and a
   value space, a potentially infinite set of values.  Because Teleport
   is based on JSON, all value spaces consist of JSON values and,
   interestingly, type definitions are JSON values too.  These
   definitions are called JSON schemas.

   These relations are defined by expanding the definition of t
   function.  For example:

      t("String") = {"a", "b", "c", "d", ...}

   This is a concrete type, a relation that maps a JSON string (the type
   name) to a value space.  The above line lets us say that "a" is of
   type String.

   Teleport ships with 7 concrete types: Integer, Float, String,
   Boolean, DateTime, Schema and JSON.  The numeric types are arbitrary-
   precision, DateTime uses the ISO 8601 [ISO.8601.1988] standard, JSON
   is a wildcard that maps to the entire set of JSON values and Schema



Boronine                  Expires May 10, 2015                  [Page 2]

Internet-Draft              Abbreviated Title              November 2014


   is the set of all JSON schemas, letting us serialize type
   definitions.

   A generic type maps a set of schemas to a set of value spaces.  For
   consistency, every generic type schema must be an object with a
   single member:

      t({name: ...}) = {...}

   Three generic types are provided: Array, Map and Struct.  Their
   precise definition is provided in the following sections, but these
   examples should be enough to understand how they work:

      ["foo", "bar"]              :: t({"Array": "String"})

      {"one": 1, "two": 2}        :: t({"Map": "Integer"})

      {"name": "Jake", "age": 28} :: t({"Struct": {
                                     "required": {"name": "String"},
                                     "optional": {"age": "Integer"}})

   Teleport's design goals is to be a natural extension of JSON, be
   extremely lightweight, and extendable not only with rich types but
   with high-level type system concepts.

1.1.  Conventions and Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

   The terms "JSON", "JSON text", "JSON value", "member", "element",
   "object", "array", "number", "string", "boolean", "true", "false",
   and "null" in this document are to be interpreted as defined in RFC
   4627 [RFC4627].

1.1.1.  Keywords

   Throughout this document, an extended JSON syntax is used.  Unquoted
   strings are symbols representing JSON values, sets and functions.
   Also, the following set theory syntax is used:

   a :: A      Set A contains element a.

   D -> C      The set of functions with domain D and co-domain C.






Boronine                  Expires May 10, 2015                  [Page 3]

Internet-Draft              Abbreviated Title              November 2014


2.  Mathematical Basis

   The set of all JSON values is called V.  A subset of V is called a
   value space and the set of all value spaces is called S.

      V = {null, true, false, 0, 1, 2, 3, 4, ...}

      S = {{}, {null}, {null, true}, {null, ...}

   There is a certain function t that maps JSON values to value spaces.

      t :: (V -> S)

2.1.  Concrete types

   x is of concrete type c if and only if

   1.  c is a string

   2.  x :: t(c).

2.2.  Generic types

   x is of generic type g if and only if

   1.  g is a string

   2.  x :: t({g: p}) for some p

3.  Built-in Concrete Types

   t("JSON")       JSON

   t("Schema")     The known domain of the t function.

   t("Integer")    All numbers that don't have a fractional or exponent
                   part.

   t("Float")      All numbers that have a fractional or exponent part.

   t("String")     All strings.

   t("Boolean")    All booleans.

   t("DateTime")   All strings that are valid according to ISO 8601
                   [ISO.8601.1988].





Boronine                  Expires May 10, 2015                  [Page 4]

Internet-Draft              Abbreviated Title              November 2014


4.  Built-in Generic Types

   x :: t({"Array": p}) if and only if

      x is an array

      e :: t(p) for every element e in x

   x :: t({"Map": p}) if and only if

      x is an object

      v :: t(p) for every pair (k, v) in x

   x :: t({"Struct": p}) if and only if

      p is an object with two members: required and optional.  Both are
      objects and their names are disjoint, that is, they don't have a
      pair of members with the same name.

      x is an object.  The name of every member of x is also the name of
      a member in p.required.

      For every pair (k, v) in x, there is a pair (k, s) in either
      p.required or p.optional such that v :: t(s).

5.  IANA Considerations

   This memo includes no request to IANA.

6.  Security Considerations

   All drafts are required to have a security considerations section.
   See RFC 3552 [RFC3552] for a guide.

7.  References

7.1.  Normative References

   [ISO.8601.1988]
              International Organization for Standardization, "Data
              elements and interchange formats - Information interchange
              - Representation of dates and times", ISO Standard 8601,
              June 1988.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.




Boronine                  Expires May 10, 2015                  [Page 5]

Internet-Draft              Abbreviated Title              November 2014


   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627, July 2006.

7.2.  Informative References

   [RFC3552]  Rescorla, E. and B. Korver, "Guidelines for Writing RFC
              Text on Security Considerations", BCP 72, RFC 3552, July
              2003.

Appendix A.  Mailing List

   Comments are solicited and should be addressed to the working group's
   mailing list at teleport-json@googlegroups.com and/or the author.

Appendix B.  Document History

   This section will be removed for RFC.

   -00

   o  Initial draft by Alexei Boronine

Author's Address

   Alexei Boronine (editor)

   Email: alexei@boronine.com
























Boronine                  Expires May 10, 2015                  [Page 6]
